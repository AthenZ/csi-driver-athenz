{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/$defs/helm-values",
  "$defs": {
    "helm-values": {
      "type": "object",
      "properties": {
        "affinity": {
          "$ref": "#/$defs/helm-values.affinity"
        },
        "app": {
          "$ref": "#/$defs/helm-values.app"
        },
        "commonLabels": {
          "$ref": "#/$defs/helm-values.commonLabels"
        },
        "global": {
          "$ref": "#/$defs/helm-values.global"
        },
        "image": {
          "$ref": "#/$defs/helm-values.image"
        },
        "imagePullSecrets": {
          "$ref": "#/$defs/helm-values.imagePullSecrets"
        },
        "nodeSelector": {
          "$ref": "#/$defs/helm-values.nodeSelector"
        },
        "priorityClassName": {
          "$ref": "#/$defs/helm-values.priorityClassName"
        },
        "tolerations": {
          "$ref": "#/$defs/helm-values.tolerations"
        },
        "topologySpreadConstraints": {
          "$ref": "#/$defs/helm-values.topologySpreadConstraints"
        }
      },
      "additionalProperties": false
    },
    "helm-values.affinity": {
      "description": "Kubernetes affinity: constraints for pod assignment.\n\nFor example:\naffinity:\n  nodeAffinity:\n   requiredDuringSchedulingIgnoredDuringExecution:\n     nodeSelectorTerms:\n     - matchExpressions:\n       - key: foo.bar.com/role\n         operator: In\n         values:\n         - master",
      "type": "object",
      "default": {}
    },
    "helm-values.app": {
      "type": "object",
      "properties": {
        "approver": {
          "$ref": "#/$defs/helm-values.app.approver"
        },
        "athenz": {
          "$ref": "#/$defs/helm-values.app.athenz"
        },
        "certificateRequestDuration": {
          "$ref": "#/$defs/helm-values.app.certificateRequestDuration"
        },
        "driver": {
          "$ref": "#/$defs/helm-values.app.driver"
        },
        "extraCertificateRequestAnnotations": {
          "$ref": "#/$defs/helm-values.app.extraCertificateRequestAnnotations"
        },
        "issuer": {
          "$ref": "#/$defs/helm-values.app.issuer"
        },
        "logLevel": {
          "$ref": "#/$defs/helm-values.app.logLevel"
        },
        "name": {
          "$ref": "#/$defs/helm-values.app.name"
        },
        "trustDomain": {
          "$ref": "#/$defs/helm-values.app.trustDomain"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.approver": {
      "type": "object",
      "properties": {
        "metrics": {
          "$ref": "#/$defs/helm-values.app.approver.metrics"
        },
        "multiTenant": {
          "$ref": "#/$defs/helm-values.app.approver.multiTenant"
        },
        "readinessProbe": {
          "$ref": "#/$defs/helm-values.app.approver.readinessProbe"
        },
        "replicaCount": {
          "$ref": "#/$defs/helm-values.app.approver.replicaCount"
        },
        "resources": {
          "$ref": "#/$defs/helm-values.app.approver.resources"
        },
        "signerName": {
          "$ref": "#/$defs/helm-values.app.approver.signerName"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.approver.metrics": {
      "type": "object",
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.port"
        },
        "service": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.approver.metrics.port": {
      "description": "-- Port for exposing Prometheus metrics on 0.0.0.0 on path '/metrics'.",
      "type": "number",
      "default": 9402
    },
    "helm-values.app.approver.metrics.service": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.enabled"
        },
        "servicemonitor": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor"
        },
        "type": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.type"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.approver.metrics.service.enabled": {
      "description": "-- Create a Service resource to expose metrics endpoint.",
      "type": "boolean",
      "default": true
    },
    "helm-values.app.approver.metrics.service.servicemonitor": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.enabled"
        },
        "interval": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.interval"
        },
        "labels": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.labels"
        },
        "prometheusInstance": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.prometheusInstance"
        },
        "scrapeTimeout": {
          "$ref": "#/$defs/helm-values.app.approver.metrics.service.servicemonitor.scrapeTimeout"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.approver.metrics.service.servicemonitor.enabled": {
      "description": "Create Prometheus ServiceMonitor resource for csi-driver-athenz approver.",
      "type": "boolean",
      "default": false
    },
    "helm-values.app.approver.metrics.service.servicemonitor.interval": {
      "description": "The interval that the Prometheus will scrape for metrics.",
      "type": "string",
      "default": "10s"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.labels": {
      "description": "Additional labels to give the ServiceMonitor resource.",
      "type": "object",
      "default": {}
    },
    "helm-values.app.approver.metrics.service.servicemonitor.prometheusInstance": {
      "description": "The value for the \"prometheus\" label on the ServiceMonitor. This allows for multiple Prometheus instances selecting difference ServiceMonitors using label selectors.",
      "type": "string",
      "default": "default"
    },
    "helm-values.app.approver.metrics.service.servicemonitor.scrapeTimeout": {
      "description": "The timeout on each metric probe request.",
      "type": "string",
      "default": "5s"
    },
    "helm-values.app.approver.metrics.service.type": {
      "description": "-- Service type to expose metrics.",
      "type": "string",
      "default": "ClusterIP"
    },
    "helm-values.app.approver.multiTenant": {
      "type": "boolean",
      "default": false
    },
    "helm-values.app.approver.readinessProbe": {
      "type": "object",
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.approver.readinessProbe.port"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.approver.readinessProbe.port": {
      "description": "-- Container port to expose csi-driver-athenz-approver HTTP readiness\nprobe on default network interface.",
      "type": "number",
      "default": 6060
    },
    "helm-values.app.approver.replicaCount": {
      "description": "-- Number of replicas of the approver to run.",
      "type": "number",
      "default": 1
    },
    "helm-values.app.approver.resources": {
      "type": "object",
      "default": {}
    },
    "helm-values.app.approver.signerName": {
      "description": "-- The signer name that csi-driver-athenz approver will be given\npermission to approve and deny. CertificateRequests referencing this signer name can be processed by the Athenz approver. See: https://cert-manager.io/docs/concepts/certificaterequest/#approval",
      "type": "string",
      "default": "clusterissuers.cert-manager.io/*"
    },
    "helm-values.app.athenz": {
      "type": "object",
      "properties": {
        "caCertFile": {
          "$ref": "#/$defs/helm-values.app.athenz.caCertFile"
        },
        "certCountryName": {
          "$ref": "#/$defs/helm-values.app.athenz.certCountryName"
        },
        "certOrgName": {
          "$ref": "#/$defs/helm-values.app.athenz.certOrgName"
        },
        "cloudProvider": {
          "$ref": "#/$defs/helm-values.app.athenz.cloudProvider"
        },
        "cloudRegion": {
          "$ref": "#/$defs/helm-values.app.athenz.cloudRegion"
        },
        "dnsDomains": {
          "$ref": "#/$defs/helm-values.app.athenz.dnsDomains"
        },
        "providerPrefix": {
          "$ref": "#/$defs/helm-values.app.athenz.providerPrefix"
        },
        "zts": {
          "$ref": "#/$defs/helm-values.app.athenz.zts"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.athenz.caCertFile": {
      "description": "-- Optional ZTS CA bundle"
    },
    "helm-values.app.athenz.certCountryName": {
      "description": "-- Country name in the certificate"
    },
    "helm-values.app.athenz.certOrgName": {
      "description": "-- Organization name in the certificate"
    },
    "helm-values.app.athenz.cloudProvider": {
      "description": "-- Cloud provider name where the driver is running"
    },
    "helm-values.app.athenz.cloudRegion": {
      "description": "-- Cloud region where the driver is running"
    },
    "helm-values.app.athenz.dnsDomains": {
      "description": "-- dns domains used to construct the Athenz service FQDN. Multiple domains can be specified separated by comma"
    },
    "helm-values.app.athenz.providerPrefix": {
      "description": "-- Provider prefix for the backend provider in ZTS which is responsible for verifying and issuing the identity."
    },
    "helm-values.app.athenz.zts": {
      "description": "-- Athenz ZTS endpoint"
    },
    "helm-values.app.certificateRequestDuration": {
      "description": "-- Duration requested for requested certificates.",
      "type": "string",
      "default": "1h"
    },
    "helm-values.app.driver": {
      "type": "object",
      "properties": {
        "csiDataDir": {
          "$ref": "#/$defs/helm-values.app.driver.csiDataDir"
        },
        "livenessProbe": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbe"
        },
        "livenessProbeImage": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage"
        },
        "nodeDriverRegistrarImage": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage"
        },
        "resources": {
          "$ref": "#/$defs/helm-values.app.driver.resources"
        },
        "sourceCABundle": {
          "$ref": "#/$defs/helm-values.app.driver.sourceCABundle"
        },
        "volumeFileName": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName"
        },
        "volumeMounts": {
          "$ref": "#/$defs/helm-values.app.driver.volumeMounts"
        },
        "volumes": {
          "$ref": "#/$defs/helm-values.app.driver.volumes"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.driver.csiDataDir": {
      "description": "-- Configures the hostPath directory that the driver will write and mount volumes from.",
      "type": "string",
      "default": "/tmp/csi-driver-athenz"
    },
    "helm-values.app.driver.livenessProbe": {
      "type": "object",
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbe.port"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.driver.livenessProbe.port": {
      "description": "-- The port that will expose the liveness of the csi-driver",
      "type": "number",
      "default": 9809
    },
    "helm-values.app.driver.livenessProbeImage": {
      "type": "object",
      "properties": {
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.app.driver.livenessProbeImage.tag"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.driver.livenessProbeImage.pullPolicy": {
      "description": "-- Kubernetes imagePullPolicy on liveness probe.",
      "type": "string",
      "default": "IfNotPresent"
    },
    "helm-values.app.driver.livenessProbeImage.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: registry.k8s.io\nrepository: sig-storage/livenessprobe",
      "type": "string"
    },
    "helm-values.app.driver.livenessProbeImage.repository": {
      "description": "-- Target image repository.",
      "type": "string",
      "default": "registry.k8s.io/sig-storage/livenessprobe"
    },
    "helm-values.app.driver.livenessProbeImage.tag": {
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string",
      "default": "v2.12.0"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage": {
      "type": "object",
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.app.driver.nodeDriverRegistrarImage.tag"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.digest": {
      "description": "Target image digest. Override any tag, if set.\nFor example:\ndigest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.pullPolicy": {
      "description": "Kubernetes imagePullPolicy on node-driver.",
      "type": "string",
      "default": "IfNotPresent"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: registry.k8s.io\nrepository: sig-storage/csi-node-driver-registrar",
      "type": "string"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.repository": {
      "description": "-- Target image repository.",
      "type": "string",
      "default": "registry.k8s.io/sig-storage/csi-node-driver-registrar"
    },
    "helm-values.app.driver.nodeDriverRegistrarImage.tag": {
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string",
      "default": "v2.11.1"
    },
    "helm-values.app.driver.resources": {
      "type": "object",
      "default": {}
    },
    "helm-values.app.driver.sourceCABundle": {
      "description": "-- Optional file containing a CA bundle that will be propagated to\nmanaged volumes."
    },
    "helm-values.app.driver.volumeFileName": {
      "type": "object",
      "properties": {
        "ca": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName.ca"
        },
        "cert": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName.cert"
        },
        "key": {
          "$ref": "#/$defs/helm-values.app.driver.volumeFileName.key"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.driver.volumeFileName.ca": {
      "description": "-- File name where the CA bundles are written to, if enabled.",
      "type": "string",
      "default": "ca.crt"
    },
    "helm-values.app.driver.volumeFileName.cert": {
      "description": "-- File name which signed certificates are written to in volumes.",
      "type": "string",
      "default": "tls.crt"
    },
    "helm-values.app.driver.volumeFileName.key": {
      "description": "-- File name which private keys are written to in volumes.",
      "type": "string",
      "default": "tls.key"
    },
    "helm-values.app.driver.volumeMounts": {
      "description": "- name: root-cas\nsecret:\n  secretName: root-ca-bundle\n-- Optional extra volume mounts. Useful for mounting root CAs",
      "type": "array",
      "default": [],
      "items": {}
    },
    "helm-values.app.driver.volumes": {
      "description": "-- Optional extra volumes. Useful for mounting root CAs",
      "type": "array",
      "default": [],
      "items": {}
    },
    "helm-values.app.extraCertificateRequestAnnotations": {
      "description": "List of annotations to add to certificate requests\n\nFor example:\nextraCertificateRequestAnnotations: app=csi-driver-athenz,foo=bar"
    },
    "helm-values.app.issuer": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/$defs/helm-values.app.issuer.group"
        },
        "kind": {
          "$ref": "#/$defs/helm-values.app.issuer.kind"
        },
        "name": {
          "$ref": "#/$defs/helm-values.app.issuer.name"
        }
      },
      "additionalProperties": false
    },
    "helm-values.app.issuer.group": {
      "description": "-- Issuer group which is used to serve this Trust Domain.",
      "type": "string",
      "default": "cert-manager.io"
    },
    "helm-values.app.issuer.kind": {
      "description": "-- Issuer kind which is used to serve this Trust Domain.",
      "type": "string",
      "default": "ClusterIssuer"
    },
    "helm-values.app.issuer.name": {
      "description": "-- Issuer name which is used to serve this Trust Domain.",
      "type": "string",
      "default": "athenz-ca"
    },
    "helm-values.app.logLevel": {
      "description": "-- Verbosity of cert-manager-csi-driver logging.",
      "type": "number",
      "default": 1
    },
    "helm-values.app.name": {
      "description": "-- The name for the CSI driver installation.",
      "type": "string",
      "default": "csi.cert-manager.athenz.io"
    },
    "helm-values.app.trustDomain": {
      "description": "-- The Trust Domain for this driver.",
      "type": "string",
      "default": "cluster.local"
    },
    "helm-values.commonLabels": {
      "description": "Labels to apply to all resources",
      "type": "object",
      "default": {}
    },
    "helm-values.global": {
      "description": "Global values shared across all (sub)charts"
    },
    "helm-values.image": {
      "type": "object",
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.image.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.image.pullPolicy"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.image.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.image.tag"
        }
      },
      "additionalProperties": false
    },
    "helm-values.image.digest": {
      "type": "object",
      "default": {},
      "properties": {
        "approver": {
          "$ref": "#/$defs/helm-values.image.digest.approver"
        },
        "driver": {
          "$ref": "#/$defs/helm-values.image.digest.driver"
        }
      },
      "additionalProperties": false
    },
    "helm-values.image.digest.approver": {
      "description": "Target csi-driver approver digest. Override any tag, if set.\nFor example:\napprover: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.image.digest.driver": {
      "description": "Target csi-driver driver digest. Override any tag, if set.\nFor example:\ndriver: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.image.pullPolicy": {
      "description": "-- Kubernetes imagePullPolicy on DaemonSet.",
      "type": "string",
      "default": "IfNotPresent"
    },
    "helm-values.image.repository": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: docker.io\nrepository:\n  driver: athenz/athenz-csi-driver\n  approver: athenz/athenz-csi-driver-approver\nregistry: docker.io",
      "type": "object",
      "default": {
        "approver": "docker.io/athenz/athenz-csi-driver-approver",
        "driver": "docker.io/athenz/athenz-csi-driver"
      }
    },
    "helm-values.image.tag": {
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.imagePullSecrets": {
      "description": "-- Optional secrets used for pulling the csi-driver-athenz and csi-driver-athenz-approver container images",
      "type": "array",
      "default": [],
      "items": {}
    },
    "helm-values.nodeSelector": {
      "description": "Kubernetes node selector: node labels for pod assignment.",
      "type": "object",
      "default": {
        "kubernetes.io/os": "linux"
      }
    },
    "helm-values.priorityClassName": {
      "description": "-- Optional priority class to be used for the csi-driver pods.",
      "type": "string",
      "default": ""
    },
    "helm-values.tolerations": {
      "description": "Kubernetes pod tolerations for cert-manager-csi-driver-spiffe.\n\nFor example:\ntolerations:\n- key: foo.bar.com/role\n  operator: Equal\n  value: master\n  effect: NoSchedule",
      "type": "array",
      "default": [],
      "items": {}
    },
    "helm-values.topologySpreadConstraints": {
      "description": "List of Kubernetes TopologySpreadConstraints.\n\nFor example:\ntopologySpreadConstraints:\n- maxSkew: 2\n  topologyKey: topology.kubernetes.io/zone\n  whenUnsatisfiable: ScheduleAnyway\n  labelSelector:\n    matchLabels:\n      app.kubernetes.io/instance: cert-manager\n      app.kubernetes.io/component: controller",
      "type": "array",
      "default": [],
      "items": {}
    }
  }
}
